Supercombinator definitions
Code for I:
   {UpdateMarkers 1,
    Take (1,1),
    PushMarker 1,
    Enter Arg 1}


Code for K:
   {UpdateMarkers 2,
    Take (2,2),
    PushMarker 1,
    Enter Arg 1}


Code for K1:
   {UpdateMarkers 2,
    Take (2,2),
    PushMarker 2,
    Enter Arg 2}


Code for S:
   {UpdateMarkers 3,
    Take (4,3),
    Move 4 Code {PushMarker 4,
                 Push PArg Code {PushMarker 3,
                                 Enter Arg 3},
                 PushMarker 2,
                 Enter Arg 2},
    Push PArg Code {Enter Arg 4},
    Push PArg Code {PushMarker 3,
                    Enter Arg 3},
    PushMarker 1,
    Enter Arg 1}


Code for compose:
   {UpdateMarkers 3,
    Take (4,3),
    Move 4 Code {PushMarker 4,
                 Push PArg Code {PushMarker 3,
                                 Enter Arg 3},
                 PushMarker 2,
                 Enter Arg 2},
    Push PArg Code {Enter Arg 4},
    PushMarker 1,
    Enter Arg 1}


Code for twice:
   {UpdateMarkers 1,
    Take (1,1),
    Push PArg Code {PushMarker 1,
                    Enter Arg 1},
    Push PArg Code {PushMarker 1,
                    Enter Arg 1},
    Enter Label "compose"}


Code for double:
   {UpdateMarkers 1,
    Take (1,1),
    Push PCont Code {Push PCont Code {Op Add,
                                      Return},
                     PushMarker 1,
                     Enter Arg 1},
    PushMarker 1,
    Enter Arg 1}


Code for main:
   {UpdateMarkers 0,
    Take (1,0),
    Move 1 Code {PushMarker 1,
                 PushV (IntVConst 2),
                 PushV (IntVConst 2),
                 Op Add,
                 Return},
    Push PArg Code {Enter Arg 1},
    Enter Label "double"}



State transitions

   0) Code:  {Enter Label "main"}
      
      Null frame ptr
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   1) Code:  {UpdateMarkers 0, Take (1,0), Move 1 Code {..}, ..}
      
      Null frame ptr
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   2) Code:  {Take (1,0), Move 1 Code {..}, Push PArg Code {..}, ..}
      
      Null frame ptr
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   3) Code:  {Move 1 Code {..}, Push PArg Code {..}, Enter Label "double"}
      
      Frame (addr  1):
        <({},FrameNull)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   4) Code:  {Push PArg Code {..}, Enter Label "double"}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   5) Code:  {Enter Label "double"}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({Enter Arg 1},FrameAddr 1)
         ({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   6) Code:  {UpdateMarkers 1, Take (1,1), Push PCont Code {..}, ..}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({Enter Arg 1},FrameAddr 1)
         ({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   7) Code:  {Take (1,1), Push PCont Code {..}, PushMarker 1, ..}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({Enter Arg 1},FrameAddr 1)
         ({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   8) Code:  {Push PCont Code {..}, PushMarker 1, Enter Arg 1}
      
      Frame (addr  2):
        <({Enter Arg 1},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   9) Code:  {PushMarker 1, Enter Arg 1}
      
      Frame (addr  2):
        <({Enter Arg 1},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        [({Push PCont Code {..}, PushMarker 1, Enter Arg 1},FrameAddr 2)]
      
      VStack:[]
      
      Dump:
        []
      
      
  10) Code:  {Enter Arg 1}
      
      Frame (addr  2):
        <({Enter Arg 1},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        [(FrameAddr 2, 1)]
      
      
  11) Code:  {Enter Arg 1}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        [(FrameAddr 2, 1)]
      
      
  12) Code:  {PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        [(FrameAddr 2, 1)]
      
      
  13) Code:  {PushV (IntVConst 2), PushV (IntVConst 2), Op Add, ..}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[]
      
      Dump:
        [(FrameAddr 1, 1)
         (FrameAddr 2, 1)]
      
      
  14) Code:  {PushV (IntVConst 2), Op Add, Return}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[2]
      
      Dump:
        [(FrameAddr 1, 1)
         (FrameAddr 2, 1)]
      
      
  15) Code:  {Op Add, Return}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[2, 2]
      
      Dump:
        [(FrameAddr 1, 1)
         (FrameAddr 2, 1)]
      
      
  16) Code:  {Return}
      
      Frame (addr  1):
        <({PushMarker 1, PushV (IntVConst 2), PushV (IntVConst 2), ..},FrameAddr 1)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[4]
      
      Dump:
        [(FrameAddr 1, 1)
         (FrameAddr 2, 1)]
      
      
  17) Code:  {Return}
      
      Frame (addr  1):
        <({PushV FramePtr, Return},FrameInt 4)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[4]
      
      Dump:
        [(FrameAddr 2, 1)]
      
      
  18) Code:  {Return}
      
      Frame (addr  1):
        <({PushV FramePtr, Return},FrameInt 4)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        [({Push PCont Code {..}, PushMarker 1, Enter Arg 1},FrameAddr 2)]
      
      VStack:[4]
      
      Dump:
        []
      
      
  19) Code:  {Push PCont Code {..}, PushMarker 1, Enter Arg 1}
      
      Frame (addr  2):
        <({PushV FramePtr, Return},FrameInt 4)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[4]
      
      Dump:
        []
      
      
  20) Code:  {PushMarker 1, Enter Arg 1}
      
      Frame (addr  2):
        <({PushV FramePtr, Return},FrameInt 4)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        [({Op Add, Return},FrameAddr 2)]
      
      VStack:[4]
      
      Dump:
        []
      
      
  21) Code:  {Enter Arg 1}
      
      Frame (addr  2):
        <({PushV FramePtr, Return},FrameInt 4)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[4]
      
      Dump:
        [(FrameAddr 2, 1)]
      
      
  22) Code:  {PushV FramePtr, Return}
      
      Frame ptr (int): 4
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[4]
      
      Dump:
        [(FrameAddr 2, 1)]
      
      
  23) Code:  {Return}
      
      Frame ptr (int): 4
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[4, 4]
      
      Dump:
        [(FrameAddr 2, 1)]
      
      
  24) Code:  {Return}
      
      Frame ptr (int): 4
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        [({Op Add, Return},FrameAddr 2)]
      
      VStack:[4, 4]
      
      Dump:
        []
      
      
  25) Code:  {Op Add, Return}
      
      Frame (addr  2):
        <({PushV FramePtr, Return},FrameInt 4)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[4, 4]
      
      Dump:
        []
      
      
  26) Code:  {Return}
      
      Frame (addr  2):
        <({PushV FramePtr, Return},FrameInt 4)>
      
      Arg stack:
        [({},FrameNull)]
      
      Cont stack:
        []
      
      VStack:[8]
      
      Dump:
        []
      Exception! System.Exception: Stack must be non-empty for return instruction
         в FSI_0004.Tim.returnInstr(TimState state) в d:\repos\jah\CoreFunc\TIM\CoreFunc\Tim.fs:строка 359
         в FSI_0004.Tim.go@424-1(TimState state, FSharpList`1 states) в d:\repos\jah\CoreFunc\TIM\CoreFunc\Tim.fs:строка 431
      
      


Steps taken = 26
Frames allocated =  2
Total heap allocations = 1
