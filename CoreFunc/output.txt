Supercombinator definitions
Code for False
Code:{Pack (1,0)
      Update 0
      Pop 0
      Unwind}



Code for True
Code:{Pack (2,0)
      Update 0
      Pop 0
      Unwind}



Code for if
Code:{Push 0
      Eval
      Get
      Cond
        ([Push 1; Eval; Update 3; Pop 3; Unwind],
         [Push 2; Eval; Update 3; Pop 3; Unwind])}



Code for negate
Code:{Push 0
      Eval
      Get
      Neg
      Mkint
      Update 1
      Pop 1
      Unwind}



Code for |
Code:{Push 1
      Push 1
      Pushglobal "|"
      Mkap
      Mkap
      Eval
      Update 2
      Pop 2
      Unwind}



Code for &
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      And
      Mkbool
      Update 2
      Pop 2
      Unwind}



Code for >=
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Ge
      Mkbool
      Update 2
      Pop 2
      Unwind}



Code for >
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Gt
      Mkbool
      Update 2
      Pop 2
      Unwind}



Code for <=
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Le
      Mkbool
      Update 2
      Pop 2
      Unwind}



Code for <
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Lt
      Mkbool
      Update 2
      Pop 2
      Unwind}



Code for ~=
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Ne
      Mkbool
      Update 2
      Pop 2
      Unwind}



Code for ==
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Eq
      Mkbool
      Update 2
      Pop 2
      Unwind}



Code for /
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Div
      Mkint
      Update 2
      Pop 2
      Unwind}



Code for *
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Mul
      Mkint
      Update 2
      Pop 2
      Unwind}



Code for -
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Sub
      Mkint
      Update 2
      Pop 2
      Unwind}



Code for +
Code:{Push 1
      Eval
      Get
      Push 0
      Eval
      Get
      Add
      Mkint
      Update 2
      Pop 2
      Unwind}



Code for main
Code:{Pushint 2
      Pushint 1
      Pushint 3
      Mkap
      Mkap
      Eval
      Get
      Pushint 2
      Pushglobal "if"
      Mkap
      Eval
      Get
      Gt
      Mkbool
      Update 0
      Pop 0
      Unwind}



Code for twice
Code:{Push 0
      Push 1
      Pushglobal "compose"
      Mkap
      Mkap
      Eval
      Update 1
      Pop 1
      Unwind}



Code for compose
Code:{Push 2
      Push 2
      Mkap
      Push 1
      Mkap
      Eval
      Update 3
      Pop 3
      Unwind}



Code for S
Code:{Push 2
      Push 2
      Mkap
      Push 3
      Push 2
      Mkap
      Mkap
      Eval
      Update 3
      Pop 3
      Unwind}



Code for K1
Code:{Push 1
      Eval
      Update 2
      Pop 2
      Unwind}



Code for K
Code:{Push 0
      Eval
      Update 2
      Pop 2
      Unwind}



Code for I
Code:{Push 0
      Eval
      Update 1
      Pop 1
      Unwind}




State transitions

   0) VStack:[]
      Stack:[]
      
      Dump:[]
      
      Code:{Pushglobal "main"
            Eval}
      
   1) VStack:[]
      Stack:[7: Global main]
      
      Dump:[]
      
      Code:{Eval}
      
   2) VStack:[]
      Stack:[7: Global main]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Unwind}
      
   3) VStack:[]
      Stack:[7: Global main]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Pushint 2
            Pushint 1
            Pushint 3
            Mkap
            Mkap
            Eval
            Get
            Pushint 2
            Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
   4) VStack:[]
      Stack:[7: Global main
             24: 2]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Pushint 1
            Pushint 3
            Mkap
            Mkap
            Eval
            Get
            Pushint 2
            Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
   5) VStack:[]
      Stack:[7: Global main
             24: 2
             25: 1]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Pushint 3
            Mkap
            Mkap
            Eval
            Get
            Pushint 2
            Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
   6) VStack:[]
      Stack:[7: Global main
             24: 2
             25: 1
             26: 3]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Mkap
            Mkap
            Eval
            Get
            Pushint 2
            Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
   7) VStack:[]
      Stack:[7: Global main
             24: 2
             27: Ap 26 25 /3/]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Mkap
            Eval
            Get
            Pushint 2
            Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
   8) VStack:[]
      Stack:[7: Global main
             28: Ap 27 24 /3/]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Eval
            Get
            Pushint 2
            Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
   9) VStack:[]
      Stack:[28: Ap 27 24 /3/]
      
      Dump:[<{}, S:[], V:[]>
            <{Get; Pushint 2; Pushglobal "if"; ...}, S:[7], V:[]>]
      
      Code:{Unwind}
      
  10) VStack:[]
      Stack:[28: Ap 27 24 /3/
             27: Ap 26 25 /3/]
      
      Dump:[<{}, S:[], V:[]>
            <{Get; Pushint 2; Pushglobal "if"; ...}, S:[7], V:[]>]
      
      Code:{Unwind}
      
  11) VStack:[]
      Stack:[28: Ap 27 24 /3/
             27: Ap 26 25 /3/
             26: 3]
      
      Dump:[<{}, S:[], V:[]>
            <{Get; Pushint 2; Pushglobal "if"; ...}, S:[7], V:[]>]
      
      Code:{Unwind}
      
  12) VStack:[]
      Stack:[7: Global main
             26: 3]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Get
            Pushint 2
            Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
  13) VStack:[3]
      Stack:[7: Global main]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Pushint 2
            Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
  14) VStack:[3]
      Stack:[7: Global main
             24: 2]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Pushglobal "if"
            Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
  15) VStack:[3]
      Stack:[7: Global main
             24: 2
             21: Global if]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Mkap
            Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
  16) VStack:[3]
      Stack:[7: Global main
             29: Ap 21 24 /Global if/]
      
      Dump:[<{}, S:[], V:[]>]
      
      Code:{Eval
            Get
            Gt
            Mkbool
            Update 0
            Pop 0
            Unwind}
      
  17) VStack:[]
      Stack:[29: Ap 21 24 /Global if/]
      
      Dump:[<{}, S:[], V:[]>
            <{Get; Gt; Mkbool; ...}, S:[7], V:[3]>]
      
      Code:{Unwind}
      
  18) VStack:[]
      Stack:[29: Ap 21 24 /Global if/
             21: Global if]
      
      Dump:[<{}, S:[], V:[]>
            <{Get; Gt; Mkbool; ...}, S:[7], V:[3]>]
      
      Code:{Unwind}
      Exception! System.Exception: Get expects NConstr or NNum
         at FSI_0004.Gm.get(GmState s) in g:\home\jah\CoreFunc\Gmachine\mark7\CoreFunc\Gm.fs:line 766
         at FSI_0004.Gm.go@814-2(GmState state, FSharpList`1 states) in g:\home\jah\CoreFunc\Gmachine\mark7\CoreFunc\Gm.fs:line 825
         at FSI_0004.Gm.go@814-2(GmState state, FSharpList`1 states) in g:\home\jah\CoreFunc\Gmachine\mark7\CoreFunc\Gm.fs:line 822
      


Steps taken:18
Heap size:29