Supercombinator definitions
Code for I:
   {UpdateMarkers 1,
    Take (1,1),
    PushMarker 1,
    Enter Arg 1}


Code for K:
   {UpdateMarkers 2,
    Take (2,2),
    PushMarker 1,
    Enter Arg 1}


Code for K1:
   {UpdateMarkers 2,
    Take (2,2),
    PushMarker 2,
    Enter Arg 2}


Code for S:
   {UpdateMarkers 3,
    Take (4,3),
    Move 4 Code {PushMarker 4,
                 Push Code {PushMarker 3,
                            Enter Arg 3},
                 PushMarker 2,
                 Enter Arg 2},
    Push Code {Enter Arg 4},
    Push Code {PushMarker 3,
               Enter Arg 3},
    PushMarker 1,
    Enter Arg 1}


Code for compose:
   {UpdateMarkers 3,
    Take (4,3),
    Move 4 Code {PushMarker 4,
                 Push Code {PushMarker 3,
                            Enter Arg 3},
                 PushMarker 2,
                 Enter Arg 2},
    Push Code {Enter Arg 4},
    PushMarker 1,
    Enter Arg 1}


Code for twice:
   {UpdateMarkers 1,
    Take (1,1),
    Push Code {PushMarker 1,
               Enter Arg 1},
    Push Code {PushMarker 1,
               Enter Arg 1},
    Enter Label "compose"}


Code for pair:
   {UpdateMarkers 3,
    Take (3,3),
    Push Code {PushMarker 2,
               Enter Arg 2},
    Push Code {PushMarker 1,
               Enter Arg 1},
    PushMarker 3,
    Enter Arg 3}


Code for first:
   {UpdateMarkers 1,
    Take (1,1),
    Push Label "K",
    PushMarker 1,
    Enter Arg 1}


Code for second:
   {UpdateMarkers 1,
    Take (1,1),
    Push Label "K1",
    PushMarker 1,
    Enter Arg 1}


Code for maine:
   {UpdateMarkers 0,
    Take (1,0),
    Move 1 Code {PushMarker 1,
                 PushV (IntVConst 3),
                 PushV (IntVConst 2),
                 Op Mul,
                 PushV (IntVConst 4),
                 Op Lt,
                 Cond {Push Code {Return},
                       Push IntConst 3,
                       Push IntConst 2,
                       Enter Label "pair"}
                      {Push Code {Return},
                       Push IntConst 2,
                       Push IntConst 3,
                       Enter Label "pair"}},
    Push Code {Push Code {Op Mul,
                          Return},
               Push Code {PushMarker 1,
                          Enter Arg 1},
               Enter Label "first"},
    Push Code {PushMarker 1,
               Enter Arg 1},
    Enter Label "second"}


Code for main:
   {Push IntConst 3,
    Push IntConst 2,
    Enter Label "pair"}



State transitions

   0) Code:  {Enter Label "main"}
      
      Null frame ptr
      
      Arg stack:
        [({},FrameNull)]
      
      VStack:[]
      
      Dump:
        []
      
      
   1) Code:  {Push IntConst 3, Push IntConst 2, Enter Label "pair"}
      
      Null frame ptr
      
      Arg stack:
        [({},FrameNull)]
      
      VStack:[]
      
      Dump:
        []
      
      
   2) Code:  {Push IntConst 2, Enter Label "pair"}
      
      Null frame ptr
      
      Arg stack:
        [({PushV FramePtr, Return},FrameInt 3)
         ({},FrameNull)]
      
      VStack:[]
      
      Dump:
        []
      
      
   3) Code:  {Enter Label "pair"}
      
      Null frame ptr
      
      Arg stack:
        [({PushV FramePtr, Return},FrameInt 2)
         ({PushV FramePtr, Return},FrameInt 3)
         ({},FrameNull)]
      
      VStack:[]
      
      Dump:
        []
      
      
   4) Code:  {UpdateMarkers 3, Take (3,3), Push Code {..}, ..}
      
      Null frame ptr
      
      Arg stack:
        [({PushV FramePtr, Return},FrameInt 2)
         ({PushV FramePtr, Return},FrameInt 3)
         ({},FrameNull)]
      
      VStack:[]
      
      Dump:
        []
      
      
   5) Code:  {Take (3,3), Push Code {..}, Push Code {..}, ..}
      
      Null frame ptr
      
      Arg stack:
        [({PushV FramePtr, Return},FrameInt 2)
         ({PushV FramePtr, Return},FrameInt 3)
         ({},FrameNull)]
      
      VStack:[]
      
      Dump:
        []
      
      
   6) Code:  {Push Code {..}, Push Code {..}, PushMarker 3, ..}
      
      Frame (addr  1):
        <({PushV FramePtr, Return},FrameInt 2)
         ({PushV FramePtr, Return},FrameInt 3)
         ({},FrameNull)>
      
      Arg stack:
        []
      
      VStack:[]
      
      Dump:
        []
      
      
   7) Code:  {Push Code {..}, PushMarker 3, Enter Arg 3}
      
      Frame (addr  1):
        <({PushV FramePtr, Return},FrameInt 2)
         ({PushV FramePtr, Return},FrameInt 3)
         ({},FrameNull)>
      
      Arg stack:
        [({PushMarker 2, Enter Arg 2},FrameAddr 1)]
      
      VStack:[]
      
      Dump:
        []
      
      
   8) Code:  {PushMarker 3, Enter Arg 3}
      
      Frame (addr  1):
        <({PushV FramePtr, Return},FrameInt 2)
         ({PushV FramePtr, Return},FrameInt 3)
         ({},FrameNull)>
      
      Arg stack:
        [({PushMarker 1, Enter Arg 1},FrameAddr 1)
         ({PushMarker 2, Enter Arg 2},FrameAddr 1)]
      
      VStack:[]
      
      Dump:
        []
      
      
   9) Code:  {Enter Arg 3}
      
      Frame (addr  1):
        <({PushV FramePtr, Return},FrameInt 2)
         ({PushV FramePtr, Return},FrameInt 3)
         ({},FrameNull)>
      
      Arg stack:
        []
      
      VStack:[]
      
      Dump:
        [(FrameAddr 1, 3)]
      
      
  10) Code:  {}
      
      Null frame ptr
      
      Arg stack:
        []
      
      VStack:[]
      
      Dump:
        [(FrameAddr 1, 3)]
      
      


Steps taken = 10
Frames allocated =  1
Total heap allocations = 3
