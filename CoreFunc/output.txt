Supercombinator definitions
Code for False
Code:{Pack (1,0)
      Update 0
      Pop 0
      Unwind}



Code for True
Code:{Pack (2,0)
      Update 0
      Pop 0
      Unwind}



Code for if
Code:{Push 2
      Push 2
      Push 2
      Pushglobal "if"
      Mkap
      Mkap
      Mkap
      Eval
      Update 3
      Pop 3
      Unwind}



Code for negate
Code:{Push 0
      Neg
      Update 1
      Pop 1
      Unwind}



Code for >=
Code:{Push 1
      Push 1
      Ge
      Update 2
      Pop 2
      Unwind}



Code for >
Code:{Push 1
      Push 1
      Gt
      Update 2
      Pop 2
      Unwind}



Code for <=
Code:{Push 1
      Push 1
      Le
      Update 2
      Pop 2
      Unwind}



Code for <
Code:{Push 1
      Push 1
      Lt
      Update 2
      Pop 2
      Unwind}



Code for ~=
Code:{Push 1
      Push 1
      Pushglobal "~="
      Mkap
      Mkap
      Eval
      Update 2
      Pop 2
      Unwind}



Code for ==
Code:{Push 1
      Push 1
      Eq
      Update 2
      Pop 2
      Unwind}



Code for /
Code:{Push 1
      Push 1
      Div
      Update 2
      Pop 2
      Unwind}



Code for *
Code:{Push 1
      Push 1
      Mul
      Update 2
      Pop 2
      Unwind}



Code for -
Code:{Push 1
      Push 1
      Sub
      Update 2
      Pop 2
      Unwind}



Code for +
Code:{Push 1
      Push 1
      Add
      Update 2
      Pop 2
      Unwind}



Code for main
Code:{Pushint 2
      Update 0
      Pop 0
      Unwind}



Code for twice
Code:{Push 0
      Push 1
      Pushglobal "compose"
      Mkap
      Mkap
      Eval
      Update 1
      Pop 1
      Unwind}



Code for compose
Code:{Push 2
      Push 2
      Mkap
      Push 1
      Mkap
      Eval
      Update 3
      Pop 3
      Unwind}



Code for S
Code:{Push 2
      Push 2
      Mkap
      Push 3
      Push 2
      Mkap
      Mkap
      Eval
      Update 3
      Pop 3
      Unwind}



Code for K1
Code:{Push 1
      Update 2
      Pop 2
      Unwind}



Code for K
Code:{Push 0
      Update 2
      Pop 2
      Unwind}



Code for I
Code:{Push 0
      Update 1
      Pop 1
      Unwind}



Code for if
Code:{Push 0
      Eval
      Casejump [(1, [Split 0; Push 2; Slide 0]); (2, [Split 0; Push 1; Slide 0])]
      Update 3
      Pop 3
      Unwind}



Code for >=
Code:{Push 1
      Eval
      Push 1
      Eval
      Ge
      Update 2
      Pop 2
      Unwind}



Code for >
Code:{Push 1
      Eval
      Push 1
      Eval
      Gt
      Update 2
      Pop 2
      Unwind}



Code for <=
Code:{Push 1
      Eval
      Push 1
      Eval
      Le
      Update 2
      Pop 2
      Unwind}



Code for <
Code:{Push 1
      Eval
      Push 1
      Eval
      Lt
      Update 2
      Pop 2
      Unwind}



Code for ~=
Code:{Push 1
      Eval
      Push 1
      Eval
      Ne
      Update 2
      Pop 2
      Unwind}



Code for ==
Code:{Push 1
      Eval
      Push 1
      Eval
      Eq
      Update 2
      Pop 2
      Unwind}



Code for negate
Code:{Push 0
      Eval
      Neg
      Update 1
      Pop 1
      Unwind}



Code for /
Code:{Push 1
      Eval
      Push 1
      Eval
      Div
      Update 2
      Pop 2
      Unwind}



Code for *
Code:{Push 1
      Eval
      Push 1
      Eval
      Mul
      Update 2
      Pop 2
      Unwind}



Code for -
Code:{Push 1
      Eval
      Push 1
      Eval
      Sub
      Update 2
      Pop 2
      Unwind}



Code for +
Code:{Push 1
      Eval
      Push 1
      Eval
      Add
      Update 2
      Pop 2
      Unwind}




State transitions

   0) Stack:[]
      Dump:[]
      Code:{Pushglobal "main"
            Eval}
      VStack:[]
      
   1) Stack:[19: Global main]
      Dump:[]
      Code:{Eval}
      VStack:[]
      
   2) Stack:[19: Global main]
      Dump:[<{},[]>]
      Code:{Unwind}
      VStack:[]
      
   3) Stack:[19: Global main]
      Dump:[<{},[]>]
      Code:{Pushint 2
            Update 0
            Pop 0
            Unwind}
      VStack:[]
      
   4) Stack:[19: Global main
             34: 2]
      Dump:[<{},[]>]
      Code:{Update 0
            Pop 0
            Unwind}
      VStack:[]
      
   5) Stack:[19: Ind 34 (2)]
      Dump:[<{},[]>]
      Code:{Pop 0
            Unwind}
      VStack:[]
      
   6) Stack:[19: Ind 34 (2)]
      Dump:[<{},[]>]
      Code:{Unwind}
      VStack:[]
      
   7) Stack:[34: 2]
      Dump:[<{},[]>]
      Code:{Unwind}
      VStack:[]
      


Steps taken:7